{
  "hash": "60296582687c92b6e9da7dedb9e842f1",
  "result": {
    "markdown": "---\ntitle: \"SQL and R: A match made for you\"\nauthor: \"Vebash Naidoo\"\nformat: html\neditor: visual\n---\n\n\n# Practise\n\nAlright let's get to it. We will do more practise now with some databases.\n\n### Packages needed\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"pacman\")   # Install pacman package\nlibrary(\"pacman\")            # Load pacman package\n\np_load(DBI, odbc, RSQLite, tidyverse, dbplyr, tidyquery, countrycode, RMariaDB)\n```\n:::\n\n\n## SQLite DB Create\n\nFirst let's create an in memory DB and explore it.\n\n### Open a connection\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an in-memory RSQLite DB\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n# List tables available through our connection\ndbListTables(con) # nothing there yet\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n:::\n\n\n### Create the table(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_names <- rownames(mtcars) %>% \n  as_tibble() %>% \n  rename(\"CarName\" = \"value\")\n\nmtcars_tbl <- mtcars %>% \n  as_tibble()\n\nmtcars_tbl <- mtcars_tbl %>% \n  bind_cols(car_names) %>% \n  select(CarName, everything())\n\ndbWriteTable(con, # using connection con\n    \"mtcars\", # write into a table \"mtcars\"\n     mtcars_tbl, # the dataset mtcars\n     overwrite = TRUE # overwrite the data there if it exists\n     )\n```\n:::\n\n\nNow that we've written a table, let's have a look at what our database contains.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mtcars\"\n```\n:::\n\n```{.r .cell-code}\ndbListFields(con, \"mtcars\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"CarName\" \"mpg\"     \"cyl\"     \"disp\"    \"hp\"      \"drat\"    \"wt\"     \n [8] \"qsec\"    \"vs\"      \"am\"      \"gear\"    \"carb\"   \n```\n:::\n:::\n\n\n#### Queries using {dplyr}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, # using our connection\n    'mtcars' # reach into the mtcars table\n    ) %>% \n  select(cyl) %>% distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   lazy query [?? x 1]\n# Database: sqlite 3.36.0 [:memory:]\n    cyl\n  <dbl>\n1     6\n2     4\n3     8\n```\n:::\n\n```{.r .cell-code}\ntbl(con, \"mtcars\") %>% \n  count(cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   lazy query [?? x 2]\n# Database: sqlite 3.36.0 [:memory:]\n    cyl     n\n  <dbl> <int>\n1     4    11\n2     6     7\n3     8    14\n```\n:::\n\n```{.r .cell-code}\ntbl(con, \"mtcars\") %>% \n  group_by(cyl) %>% \n  summarise(mean_disp = mean(disp, na.rm = TRUE),\n            mean_mpg = mean(mpg, na.rm = TRUE),\n            med_wt = median(wt, na.rm = TRUE)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   lazy query [?? x 4]\n# Database: sqlite 3.36.0 [:memory:]\n    cyl mean_disp mean_mpg med_wt\n  <dbl>     <dbl>    <dbl>  <dbl>\n1     4      105.     26.7   2.2 \n2     6      183.     19.7   3.22\n3     8      353.     15.1   3.76\n```\n:::\n\n```{.r .cell-code}\ntbl(con, \"mtcars\") %>% \n  mutate(new_car_name = \n           paste(CarName, cyl, sep = \" - \")) %>% \n  select(CarName, cyl, new_car_name) %>% show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT `CarName`, `cyl`, `CarName` || ' - ' || `cyl` AS `new_car_name`\nFROM `mtcars`\n```\n:::\n\n```{.r .cell-code}\nmtcars_from_db <- tbl(con, \"mtcars\") %>% \n  collect()\n\nmtcars_from_db %>% \n  slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 12\n  CarName        mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Mazda RX4     21       6   160   110  3.9   2.62  16.5     0     1     4     4\n2 Mazda RX4 W~  21       6   160   110  3.9   2.88  17.0     0     1     4     4\n3 Datsun 710    22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\n4 Hornet 4 Dr~  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\n5 Hornet Spor~  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\n```\n:::\n:::\n\n\n#### Queries using SQL\n\n\n::: {.cell connection='con'}\n\n```{.sql .cell-code}\n-- Let's have a look at a few rows using SQL now (this is a SQL comment - notice the `--`)\nSELECT * FROM mtcars\nLIMIT 10\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|CarName           |  mpg| cyl|  disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|-----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6| 160.0| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6| 160.0| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4| 108.0|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6| 258.0| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8| 360.0| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6| 225.0| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n|Duster 360        | 14.3|   8| 360.0| 245| 3.21| 3.570| 15.84|  0|  0|    3|    4|\n|Merc 240D         | 24.4|   4| 146.7|  62| 3.69| 3.190| 20.00|  1|  0|    4|    2|\n|Merc 230          | 22.8|   4| 140.8|  95| 3.92| 3.150| 22.90|  1|  0|    4|    2|\n|Merc 280          | 19.2|   6| 167.6| 123| 3.92| 3.440| 18.30|  1|  0|    4|    4|\n\n</div>\n:::\n\n\nWe can even copy the contents of the `show_query` result into a SQL code block and execute this.\n\n\n::: {.cell connection='con'}\n\n```{.sql .cell-code}\nSELECT `CarName`\n, `cyl`\n, `CarName` || ' - ' || `cyl` AS `new_car_name`\nFROM `mtcars`\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|CarName           | cyl|new_car_name            |\n|:-----------------|---:|:-----------------------|\n|Mazda RX4         |   6|Mazda RX4 - 6.0         |\n|Mazda RX4 Wag     |   6|Mazda RX4 Wag - 6.0     |\n|Datsun 710        |   4|Datsun 710 - 4.0        |\n|Hornet 4 Drive    |   6|Hornet 4 Drive - 6.0    |\n|Hornet Sportabout |   8|Hornet Sportabout - 8.0 |\n|Valiant           |   6|Valiant - 6.0           |\n|Duster 360        |   8|Duster 360 - 8.0        |\n|Merc 240D         |   4|Merc 240D - 4.0         |\n|Merc 230          |   4|Merc 230 - 4.0          |\n|Merc 280          |   6|Merc 280 - 6.0          |\n\n</div>\n:::\n\n\nOnce we are done we need to disconnect!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## Work with a created SQLite DB\n\nIn the folder you will find another SQLite DB named `ticket_to_ride.sqlite`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(RSQLite::SQLite(), \n        dbname = \"ticket_to_ride.sqlite\")\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country_codes\" \"transit_cost\" \n```\n:::\n\n```{.r .cell-code}\ntbl(con, \"country_codes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<country_codes> [?? x 743]\n# Database: sqlite 3.36.0\n#   [C:\\Current-Work\\prep-db-talk\\sql-and-r-botswana\\ticket_to_ride.sqlite]\n   ar5      cctld continent country.name.de     country.name.de~ country.name.en\n   <chr>    <chr> <chr>     <chr>               <chr>            <chr>          \n 1 ASIA     .af   Asia      Afghanistan         afghan           Afghanistan    \n 2 OECD1990 .ax   Europe    Aland Islands       åland            Åland Islands  \n 3 EIT      .al   Europe    Albanien            albanien         Albania        \n 4 MAF      .dz   Africa    Algerien            algerien         Algeria        \n 5 ASIA     .as   Oceania   Amerikanisch-Samoa  ^(?=.*amerik).*~ American Samoa \n 6 OECD1990 .ad   Europe    Andorra             andorra          Andorra        \n 7 MAF      .ao   Africa    Angola              angola           Angola         \n 8 LAM      .ai   Americas  Anguilla            anguill?a        Anguilla       \n 9 LAM      .aq   <NA>      Antarktis           antarktis        Antarctica     \n10 LAM      .ag   Americas  Antigua und Barbuda antigua          Antigua & Barb~\n# ... with more rows, and 737 more variables: country.name.en.regex <chr>,\n#   cow.name <chr>, cowc <chr>, cown <dbl>, currency <chr>, dhs <chr>,\n#   ecb <chr>, eu28 <chr>, eurocontrol_pru <chr>, eurocontrol_statfor <chr>,\n#   eurostat <chr>, fao <dbl>, fips <chr>, gaul <dbl>, genc2c <chr>,\n#   genc3c <chr>, genc3n <chr>, gwc <chr>, gwn <dbl>, icao.region <chr>,\n#   imf <dbl>, ioc <chr>, iso.name.en <chr>, iso.name.fr <chr>, iso2c <chr>,\n#   iso3c <chr>, iso3n <dbl>, iso4217c <chr>, iso4217n <dbl>, ...\n```\n:::\n\n```{.r .cell-code}\ntbl(con, \"transit_cost\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<transit_cost> [?? x 20]\n# Database: sqlite 3.36.0\n#   [C:\\Current-Work\\prep-db-talk\\sql-and-r-botswana\\ticket_to_ride.sqlite]\n       e country city   line  start_year end_year    rr length tunnel_per tunnel\n   <dbl> <chr>   <chr>  <chr> <chr>      <chr>    <dbl>  <dbl> <chr>       <dbl>\n 1  7136 CA      Vanco~ Broa~ 2020       2025         0    5.7 87.72%        5  \n 2  7137 CA      Toron~ Vaug~ 2009       2017         0    8.6 100.00%       8.6\n 3  7138 CA      Toron~ Scar~ 2020       2030         0    7.8 100.00%       7.8\n 4  7139 CA      Toron~ Onta~ 2020       2030         0   15.5 57.00%        8.8\n 5  7144 CA      Toron~ Yong~ 2020       2030         0    7.4 100.00%       7.4\n 6  7145 NL      Amste~ Nort~ 2003       2018         0    9.7 73.00%        7.1\n 7  7146 CA      Montr~ Blue~ 2020       2026         0    5.8 100.00%       5.8\n 8  7147 US      Seatt~ U-Li~ 2009       2016         0    5.1 100.00%       5.1\n 9  7152 US      Los A~ Purp~ 2020       2027         0    4.2 100.00%       4.2\n10  7153 US      Los A~ Purp~ 2018       2026         0    4.2 100.00%       4.2\n# ... with more rows, and 10 more variables: stations <dbl>, source1 <chr>,\n#   cost <dbl>, currency <chr>, year <dbl>, ppp_rate <dbl>, real_cost <chr>,\n#   cost_km_millions <dbl>, source2 <chr>, reference <chr>\n```\n:::\n\n```{.r .cell-code}\nsummary_transit <- tbl(con, \"transit_cost\") %>% \n  filter(country %in% c(\"US\", \"CA\")) %>% \n  group_by(country) %>% \n  mutate(avg_cost_km = mean(cost_km_millions,\n                        na.rm = TRUE),\n         max_cost_km = max(cost_km_millions,\n                        na.rm = TRUE)) %>% \n  ungroup() %>% \n  select(country, start_year, end_year,\n         cost_km_millions, avg_cost_km, \n         max_cost_km) %>% \n  arrange(desc(avg_cost_km), start_year) %>% \n  collect()\n\nsummary_all_countries <- tbl(con, \"transit_cost\") %>% \n  group_by(country) %>% \n  mutate(avg_cost_km = mean(cost_km_millions,\n                        na.rm = TRUE),\n         max_cost_km = max(cost_km_millions,\n                        na.rm = TRUE)) %>% \n  ungroup() %>% \n  select(country, avg_cost_km, \n         max_cost_km) %>% \n  collect()\n\nsummary_all_countries %>% \n  arrange(desc(max_cost_km)) %>% \n  distinct() %>% \n  slice_head(n = 8) %>% \n  ggplot(aes(y = country, x = max_cost_km)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](Workshop-setup_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## Work with a MSQL DB\n\nIn the [DBI Documentation](https://dbi.r-dbi.org/articles/dbi) there is a reference to a MSQL DB. Let's connect and see how seamlessly `dbplyr` handles a new dialect of SQL.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n\ncon <- dbConnect(\n  RMariaDB::MariaDB(),\n  host = \"relational.fit.cvut.cz\",\n  port = 3306,\n  username = \"guest\",\n  password = \"relational\",\n  dbname = \"sakila\"\n)\n\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"actor\"         \"address\"       \"category\"      \"city\"         \n [5] \"country\"       \"customer\"      \"film\"          \"film_actor\"   \n [9] \"film_category\" \"film_text\"     \"inventory\"     \"language\"     \n[13] \"payment\"       \"rental\"        \"staff\"         \"store\"        \n```\n:::\n\n```{.r .cell-code}\ntbl(con, \"actor\") %>% \n  inner_join(tbl(con, \"film_actor\"),\n          by = c(\"actor_id\" = \"actor_id\")) %>% \n  inner_join(tbl(con, \"film\"),\n          by = c(\"film_id\" = \"film_id\")) %>%\n  inner_join(tbl(con, \"film_category\"),\n          by = c(\"film_id\" = \"film_id\")) %>% \n  inner_join(tbl(con, \"category\"),\n          by = c(\"category_id\" = \"category_id\")) %>% \n  select(first_name, last_name, title, rating, name, length, replacement_cost, rental_rate) %>% \n  group_by(first_name, last_name, name) %>% \n  summarise(mean_duration = mean(length, na.rm=TRUE),\n          mean_replacement_cost = mean(replacement_cost, na.rm=TRUE),\n          number_of_category = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   lazy query [?? x 6]\n# Database: mysql [guest@relational.fit.cvut.cz:NA/sakila]\n# Groups:   first_name, last_name\n   first_name last_name name     mean_duration mean_replacemen~ number_of_categ~\n   <chr>      <chr>     <chr>            <dbl>            <dbl>          <int64>\n 1 ADAM       GRANT     Action            86               20.0                1\n 2 ADAM       GRANT     Children         123.              25.0                3\n 3 ADAM       GRANT     Classics         155               14.0                1\n 4 ADAM       GRANT     Comedy           148.              25.7                3\n 5 ADAM       GRANT     Family           173               21.0                1\n 6 ADAM       GRANT     Foreign          136.              27.0                2\n 7 ADAM       GRANT     Games             94.7             20.0                3\n 8 ADAM       GRANT     Sci-Fi            86               16.0                1\n 9 ADAM       GRANT     Sports            96               29.0                2\n10 ADAM       GRANT     Travel           141               18.0                1\n# ... with more rows\n```\n:::\n:::\n\n::: {.cell connection='con' output.var='agg_mysql'}\n\n```{.sql .cell-code}\nSELECT first_name\n, last_name\n, name AS category\n, AVG(length) AS mean_duration\n, AVG(replacement_cost) AS mean_replacement_cost\n, COUNT(name) AS number_of_category\nFROM actor a\nINNER JOIN film_actor fa ON a.actor_id = fa.actor_id\nINNER JOIN film f ON f.film_id = fa.film_id\nINNER JOIN film_category fc ON fc.film_id = f.film_id\nINNER JOIN category c ON fc.category_id = c.category_id\nGROUP BY first_name, last_name, name\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nagg_mysql %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,596\nColumns: 6\n$ first_name            <chr> \"ADAM\", \"ADAM\", \"ADAM\", \"ADAM\", \"ADAM\", \"ADAM\", ~\n$ last_name             <chr> \"GRANT\", \"GRANT\", \"GRANT\", \"GRANT\", \"GRANT\", \"GR~\n$ category              <chr> \"Action\", \"Children\", \"Classics\", \"Comedy\", \"Fam~\n$ mean_duration         <dbl> 86.0000, 123.3333, 155.0000, 147.6667, 173.0000,~\n$ mean_replacement_cost <dbl> 19.99000, 24.99000, 13.99000, 25.65667, 20.99000~\n$ number_of_category    <int64> 1, 3, 1, 3, 1, 2, 3, 1, 2, 1, 2, 1, 1, 2, 2, 1~\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## `{tidyquery}`\n\nTidyquery allows you to query a dataframe as though it is a SQL DB table! If you're more familiar with SQL and want to learn the `{tidyverse}` this is a good package for that!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(agg_mysql)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nquery(\n  \"SELECT first_name AS Name\n  , last_name AS Surname\n  , category AS Category\n  , mean_duration AS AvgDuration\n  FROM agg_mysql\n  WHERE lower(first_name) = 'adam'\n  ORDER BY mean_duration DESC\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Name Surname    Category AvgDuration\n1  ADAM  HOPPER       Drama    179.0000\n2  ADAM   GRANT      Family    173.0000\n3  ADAM   GRANT    Classics    155.0000\n4  ADAM  HOPPER         New    149.5000\n5  ADAM   GRANT      Comedy    147.6667\n6  ADAM  HOPPER    Classics    144.0000\n7  ADAM   GRANT      Travel    141.0000\n8  ADAM   GRANT     Foreign    136.5000\n9  ADAM  HOPPER       Music    128.0000\n10 ADAM  HOPPER      Sci-Fi    126.3333\n11 ADAM   GRANT    Children    123.3333\n12 ADAM  HOPPER      Family    122.3333\n13 ADAM  HOPPER Documentary    117.5000\n14 ADAM   GRANT      Sports     96.0000\n15 ADAM   GRANT       Games     94.6667\n16 ADAM   GRANT      Action     86.0000\n17 ADAM   GRANT      Sci-Fi     86.0000\n18 ADAM  HOPPER      Action     77.5000\n19 ADAM  HOPPER     Foreign     72.0000\n20 ADAM  HOPPER      Horror     71.0000\n21 ADAM  HOPPER      Comedy     64.0000\n22 ADAM  HOPPER    Children     57.0000\n```\n:::\n\n```{.r .cell-code}\nshow_dplyr(\n  \"SELECT first_name AS Name\n  , last_name AS Surname\n  , category AS Category\n  , mean_duration AS AvgDuration\n  FROM agg_mysql\n  WHERE lower(first_name) = 'adam'\n  ORDER BY mean_duration DESC\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nagg_mysql %>%\n  filter(stringr::str_to_lower(first_name) == \"adam\") %>%\n  mutate(Name = first_name, Surname = last_name, Category = category, AvgDuration = mean_duration) %>%\n  arrange(dplyr::desc(mean_duration)) %>%\n  select(Name = first_name, Surname = last_name, Category = category, AvgDuration = mean_duration)\n```\n:::\n:::\n",
    "supporting": [
      "Workshop-setup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}